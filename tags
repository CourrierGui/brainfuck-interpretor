!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BFInterpretor	bf-interpretor.hpp	/^    BFInterpretor(const std::string& input_file)$/;"	f	class:BFInterpretor
BFInterpretor	bf-interpretor.hpp	/^class BFInterpretor {$/;"	c
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f
InvalidSyntax	bf-interpretor.hpp	/^struct InvalidSyntax {$/;"	s
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f
Parser	bf-interpretor.hpp	/^    Parser(const std::string& input_file) {$/;"	f	class:Parser
Parser	bf-interpretor.hpp	/^class Parser {$/;"	c
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.C', '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
Settings	.ycm_extra_conf.py	/^def Settings( **kwargs ):$/;"	f
c	bf-interpretor.hpp	/^  char c;$/;"	m	struct:InvalidSyntax
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
database	.ycm_extra_conf.py	/^  database = None$/;"	v
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
get_instructions	bf-interpretor.hpp	/^    std::vector<char> get_instructions() {$/;"	f	class:Parser
m_inst	bf-interpretor.hpp	/^    instruction_type m_inst;$/;"	m	class:BFInterpretor
m_inst	bf-interpretor.hpp	/^    std::vector<char> m_inst;$/;"	m	class:Parser
m_inst_ptr	bf-interpretor.hpp	/^    instruction_type::iterator m_inst_ptr;$/;"	m	class:BFInterpretor
m_ptr	bf-interpretor.hpp	/^    buffer_type::iterator m_ptr;$/;"	m	class:BFInterpretor
main	main.cpp	/^int main(int argc, char** argv) {$/;"	f
next_match	bf-interpretor.hpp	/^    void next_match() {$/;"	f	class:BFInterpretor
previous_match	bf-interpretor.hpp	/^    void previous_match() {$/;"	f	class:BFInterpretor
start	bf-interpretor.hpp	/^    void start() {$/;"	f	class:BFInterpretor
step	bf-interpretor.hpp	/^    void step(const char c) {$/;"	f	class:BFInterpretor
